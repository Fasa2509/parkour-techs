// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider              = "zod-prisma"
  output                = "./zod"
  relationModel         = true
  modelCase             = "camelCase"
  modelSuffix           = "Schema"
  useDecimalJs          = true
  prismaJsonNullability = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Account {
//   id                 String  @id @default(cuid())
//   userId             String
//   type               String
//   provider           String
//   providerAccountId  String
//   refresh_token      String?  @db.Text
//   access_token       String?  @db.Text
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String?  @db.Text
//   session_state      String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  companyId    String
  expires      DateTime
  company      Company  @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Company {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String
  direction     String
  createdAt     DateTime? @default(now())
  emailVerified DateTime?
  sessions      Session[]
  workers       Worker[]
}

model Worker {
  id        String    @id @default(cuid())
  email     String    @unique
  name      String
  ci        Int
  phone     String
  direction String
  salary    Int
  hours     Int
  status    STATUS
  createdAt DateTime? @default(now())
  companyId String
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

enum STATUS {
  active
  vacations
  inactive
}

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }
